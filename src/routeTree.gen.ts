/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignInImport } from './routes/sign-in'
import { Route as RedirectImport } from './routes/redirect'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedDeferredImport } from './routes/_authed/deferred'
import { Route as AuthedDashboardImport } from './routes/_authed/dashboard'
import { Route as AuthedPathlessLayoutImport } from './routes/_authed/_pathlessLayout'
import { Route as AuthedSplatImport } from './routes/_authed/$'
import { Route as AuthedUsersRouteImport } from './routes/_authed/users.route'
import { Route as AuthedPostsRouteImport } from './routes/_authed/posts.route'
import { Route as AuthedUsersIndexImport } from './routes/_authed/users.index'
import { Route as AuthedPostsIndexImport } from './routes/_authed/posts.index'
import { Route as AuthedhomeIndexImport } from './routes/_authed/(home)/index'
import { Route as AuthedUsersUserIdImport } from './routes/_authed/users.$userId'
import { Route as AuthedPostsPostIdImport } from './routes/_authed/posts.$postId'
import { Route as AuthedPathlessLayoutNestedLayoutImport } from './routes/_authed/_pathlessLayout/_nested-layout'
import { Route as AuthedPostsPostIdDeepImport } from './routes/_authed/posts_.$postId.deep'
import { Route as AuthedPathlessLayoutNestedLayoutRouteBImport } from './routes/_authed/_pathlessLayout/_nested-layout/route-b'
import { Route as AuthedPathlessLayoutNestedLayoutRouteAImport } from './routes/_authed/_pathlessLayout/_nested-layout/route-a'

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedDeferredRoute = AuthedDeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedDashboardRoute = AuthedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedPathlessLayoutRoute = AuthedPathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSplatRoute = AuthedSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedUsersRouteRoute = AuthedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedPostsRouteRoute = AuthedPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedUsersIndexRoute = AuthedUsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedUsersRouteRoute,
} as any)

const AuthedPostsIndexRoute = AuthedPostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedPostsRouteRoute,
} as any)

const AuthedhomeIndexRoute = AuthedhomeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedUsersUserIdRoute = AuthedUsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => AuthedUsersRouteRoute,
} as any)

const AuthedPostsPostIdRoute = AuthedPostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => AuthedPostsRouteRoute,
} as any)

const AuthedPathlessLayoutNestedLayoutRoute =
  AuthedPathlessLayoutNestedLayoutImport.update({
    id: '/_nested-layout',
    getParentRoute: () => AuthedPathlessLayoutRoute,
  } as any)

const AuthedPostsPostIdDeepRoute = AuthedPostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedPathlessLayoutNestedLayoutRouteBRoute =
  AuthedPathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => AuthedPathlessLayoutNestedLayoutRoute,
  } as any)

const AuthedPathlessLayoutNestedLayoutRouteARoute =
  AuthedPathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => AuthedPathlessLayoutNestedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/_authed/posts': {
      id: '/_authed/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthedPostsRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/users': {
      id: '/_authed/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthedUsersRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/$': {
      id: '/_authed/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof AuthedSplatImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/_pathlessLayout': {
      id: '/_authed/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedPathlessLayoutImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/deferred': {
      id: '/_authed/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof AuthedDeferredImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/_pathlessLayout/_nested-layout': {
      id: '/_authed/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedPathlessLayoutNestedLayoutImport
      parentRoute: typeof AuthedPathlessLayoutImport
    }
    '/_authed/posts/$postId': {
      id: '/_authed/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof AuthedPostsPostIdImport
      parentRoute: typeof AuthedPostsRouteImport
    }
    '/_authed/users/$userId': {
      id: '/_authed/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthedUsersUserIdImport
      parentRoute: typeof AuthedUsersRouteImport
    }
    '/_authed/(home)/': {
      id: '/_authed/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedhomeIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/posts/': {
      id: '/_authed/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof AuthedPostsIndexImport
      parentRoute: typeof AuthedPostsRouteImport
    }
    '/_authed/users/': {
      id: '/_authed/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof AuthedUsersIndexImport
      parentRoute: typeof AuthedUsersRouteImport
    }
    '/_authed/_pathlessLayout/_nested-layout/route-a': {
      id: '/_authed/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof AuthedPathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof AuthedPathlessLayoutNestedLayoutImport
    }
    '/_authed/_pathlessLayout/_nested-layout/route-b': {
      id: '/_authed/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof AuthedPathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof AuthedPathlessLayoutNestedLayoutImport
    }
    '/_authed/posts_/$postId/deep': {
      id: '/_authed/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof AuthedPostsPostIdDeepImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedPostsRouteRouteChildren {
  AuthedPostsPostIdRoute: typeof AuthedPostsPostIdRoute
  AuthedPostsIndexRoute: typeof AuthedPostsIndexRoute
}

const AuthedPostsRouteRouteChildren: AuthedPostsRouteRouteChildren = {
  AuthedPostsPostIdRoute: AuthedPostsPostIdRoute,
  AuthedPostsIndexRoute: AuthedPostsIndexRoute,
}

const AuthedPostsRouteRouteWithChildren =
  AuthedPostsRouteRoute._addFileChildren(AuthedPostsRouteRouteChildren)

interface AuthedUsersRouteRouteChildren {
  AuthedUsersUserIdRoute: typeof AuthedUsersUserIdRoute
  AuthedUsersIndexRoute: typeof AuthedUsersIndexRoute
}

const AuthedUsersRouteRouteChildren: AuthedUsersRouteRouteChildren = {
  AuthedUsersUserIdRoute: AuthedUsersUserIdRoute,
  AuthedUsersIndexRoute: AuthedUsersIndexRoute,
}

const AuthedUsersRouteRouteWithChildren =
  AuthedUsersRouteRoute._addFileChildren(AuthedUsersRouteRouteChildren)

interface AuthedPathlessLayoutNestedLayoutRouteChildren {
  AuthedPathlessLayoutNestedLayoutRouteARoute: typeof AuthedPathlessLayoutNestedLayoutRouteARoute
  AuthedPathlessLayoutNestedLayoutRouteBRoute: typeof AuthedPathlessLayoutNestedLayoutRouteBRoute
}

const AuthedPathlessLayoutNestedLayoutRouteChildren: AuthedPathlessLayoutNestedLayoutRouteChildren =
  {
    AuthedPathlessLayoutNestedLayoutRouteARoute:
      AuthedPathlessLayoutNestedLayoutRouteARoute,
    AuthedPathlessLayoutNestedLayoutRouteBRoute:
      AuthedPathlessLayoutNestedLayoutRouteBRoute,
  }

const AuthedPathlessLayoutNestedLayoutRouteWithChildren =
  AuthedPathlessLayoutNestedLayoutRoute._addFileChildren(
    AuthedPathlessLayoutNestedLayoutRouteChildren,
  )

interface AuthedPathlessLayoutRouteChildren {
  AuthedPathlessLayoutNestedLayoutRoute: typeof AuthedPathlessLayoutNestedLayoutRouteWithChildren
}

const AuthedPathlessLayoutRouteChildren: AuthedPathlessLayoutRouteChildren = {
  AuthedPathlessLayoutNestedLayoutRoute:
    AuthedPathlessLayoutNestedLayoutRouteWithChildren,
}

const AuthedPathlessLayoutRouteWithChildren =
  AuthedPathlessLayoutRoute._addFileChildren(AuthedPathlessLayoutRouteChildren)

interface AuthedRouteChildren {
  AuthedPostsRouteRoute: typeof AuthedPostsRouteRouteWithChildren
  AuthedUsersRouteRoute: typeof AuthedUsersRouteRouteWithChildren
  AuthedSplatRoute: typeof AuthedSplatRoute
  AuthedPathlessLayoutRoute: typeof AuthedPathlessLayoutRouteWithChildren
  AuthedDashboardRoute: typeof AuthedDashboardRoute
  AuthedDeferredRoute: typeof AuthedDeferredRoute
  AuthedhomeIndexRoute: typeof AuthedhomeIndexRoute
  AuthedPostsPostIdDeepRoute: typeof AuthedPostsPostIdDeepRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPostsRouteRoute: AuthedPostsRouteRouteWithChildren,
  AuthedUsersRouteRoute: AuthedUsersRouteRouteWithChildren,
  AuthedSplatRoute: AuthedSplatRoute,
  AuthedPathlessLayoutRoute: AuthedPathlessLayoutRouteWithChildren,
  AuthedDashboardRoute: AuthedDashboardRoute,
  AuthedDeferredRoute: AuthedDeferredRoute,
  AuthedhomeIndexRoute: AuthedhomeIndexRoute,
  AuthedPostsPostIdDeepRoute: AuthedPostsPostIdDeepRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedPathlessLayoutNestedLayoutRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/sign-in': typeof SignInRoute
  '/posts': typeof AuthedPostsRouteRouteWithChildren
  '/users': typeof AuthedUsersRouteRouteWithChildren
  '/$': typeof AuthedSplatRoute
  '/dashboard': typeof AuthedDashboardRoute
  '/deferred': typeof AuthedDeferredRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/users/$userId': typeof AuthedUsersUserIdRoute
  '/': typeof AuthedhomeIndexRoute
  '/posts/': typeof AuthedPostsIndexRoute
  '/users/': typeof AuthedUsersIndexRoute
  '/route-a': typeof AuthedPathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof AuthedPathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof AuthedPostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/redirect': typeof RedirectRoute
  '/sign-in': typeof SignInRoute
  '/$': typeof AuthedSplatRoute
  '': typeof AuthedPathlessLayoutNestedLayoutRouteWithChildren
  '/dashboard': typeof AuthedDashboardRoute
  '/deferred': typeof AuthedDeferredRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/users/$userId': typeof AuthedUsersUserIdRoute
  '/': typeof AuthedhomeIndexRoute
  '/posts': typeof AuthedPostsIndexRoute
  '/users': typeof AuthedUsersIndexRoute
  '/route-a': typeof AuthedPathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof AuthedPathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof AuthedPostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/sign-in': typeof SignInRoute
  '/_authed/posts': typeof AuthedPostsRouteRouteWithChildren
  '/_authed/users': typeof AuthedUsersRouteRouteWithChildren
  '/_authed/$': typeof AuthedSplatRoute
  '/_authed/_pathlessLayout': typeof AuthedPathlessLayoutRouteWithChildren
  '/_authed/dashboard': typeof AuthedDashboardRoute
  '/_authed/deferred': typeof AuthedDeferredRoute
  '/_authed/_pathlessLayout/_nested-layout': typeof AuthedPathlessLayoutNestedLayoutRouteWithChildren
  '/_authed/posts/$postId': typeof AuthedPostsPostIdRoute
  '/_authed/users/$userId': typeof AuthedUsersUserIdRoute
  '/_authed/(home)/': typeof AuthedhomeIndexRoute
  '/_authed/posts/': typeof AuthedPostsIndexRoute
  '/_authed/users/': typeof AuthedUsersIndexRoute
  '/_authed/_pathlessLayout/_nested-layout/route-a': typeof AuthedPathlessLayoutNestedLayoutRouteARoute
  '/_authed/_pathlessLayout/_nested-layout/route-b': typeof AuthedPathlessLayoutNestedLayoutRouteBRoute
  '/_authed/posts_/$postId/deep': typeof AuthedPostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/redirect'
    | '/sign-in'
    | '/posts'
    | '/users'
    | '/$'
    | '/dashboard'
    | '/deferred'
    | '/posts/$postId'
    | '/users/$userId'
    | '/'
    | '/posts/'
    | '/users/'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/redirect'
    | '/sign-in'
    | '/$'
    | ''
    | '/dashboard'
    | '/deferred'
    | '/posts/$postId'
    | '/users/$userId'
    | '/'
    | '/posts'
    | '/users'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/_authed'
    | '/redirect'
    | '/sign-in'
    | '/_authed/posts'
    | '/_authed/users'
    | '/_authed/$'
    | '/_authed/_pathlessLayout'
    | '/_authed/dashboard'
    | '/_authed/deferred'
    | '/_authed/_pathlessLayout/_nested-layout'
    | '/_authed/posts/$postId'
    | '/_authed/users/$userId'
    | '/_authed/(home)/'
    | '/_authed/posts/'
    | '/_authed/users/'
    | '/_authed/_pathlessLayout/_nested-layout/route-a'
    | '/_authed/_pathlessLayout/_nested-layout/route-b'
    | '/_authed/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  RedirectRoute: typeof RedirectRoute
  SignInRoute: typeof SignInRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  RedirectRoute: RedirectRoute,
  SignInRoute: SignInRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/redirect",
        "/sign-in"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/posts",
        "/_authed/users",
        "/_authed/$",
        "/_authed/_pathlessLayout",
        "/_authed/dashboard",
        "/_authed/deferred",
        "/_authed/(home)/",
        "/_authed/posts_/$postId/deep"
      ]
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/_authed/posts": {
      "filePath": "_authed/posts.route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/posts/$postId",
        "/_authed/posts/"
      ]
    },
    "/_authed/users": {
      "filePath": "_authed/users.route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/users/$userId",
        "/_authed/users/"
      ]
    },
    "/_authed/$": {
      "filePath": "_authed/$.tsx",
      "parent": "/_authed"
    },
    "/_authed/_pathlessLayout": {
      "filePath": "_authed/_pathlessLayout.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/_pathlessLayout/_nested-layout"
      ]
    },
    "/_authed/dashboard": {
      "filePath": "_authed/dashboard.tsx",
      "parent": "/_authed"
    },
    "/_authed/deferred": {
      "filePath": "_authed/deferred.tsx",
      "parent": "/_authed"
    },
    "/_authed/_pathlessLayout/_nested-layout": {
      "filePath": "_authed/_pathlessLayout/_nested-layout.tsx",
      "parent": "/_authed/_pathlessLayout",
      "children": [
        "/_authed/_pathlessLayout/_nested-layout/route-a",
        "/_authed/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/_authed/posts/$postId": {
      "filePath": "_authed/posts.$postId.tsx",
      "parent": "/_authed/posts"
    },
    "/_authed/users/$userId": {
      "filePath": "_authed/users.$userId.tsx",
      "parent": "/_authed/users"
    },
    "/_authed/(home)/": {
      "filePath": "_authed/(home)/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/posts/": {
      "filePath": "_authed/posts.index.tsx",
      "parent": "/_authed/posts"
    },
    "/_authed/users/": {
      "filePath": "_authed/users.index.tsx",
      "parent": "/_authed/users"
    },
    "/_authed/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_authed/_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_authed/_pathlessLayout/_nested-layout"
    },
    "/_authed/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_authed/_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_authed/_pathlessLayout/_nested-layout"
    },
    "/_authed/posts_/$postId/deep": {
      "filePath": "_authed/posts_.$postId.deep.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
